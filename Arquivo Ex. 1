//Numeros fracionarios.h
#ifndef NUMEROSFRACIONARIOS_H_
#define NUMEROSFRACIONARIOS_H_

class NumerosFracionarios {
private: int a, b;
public:
	NumerosFracionarios();
	virtual ~NumerosFracionarios();
	void Reduz()const;
	bool getA(int);
	bool getB(int);
	void getAB()const;
	double soma()const;
	double divisao()const;
	double multiplicaçao()const;
	bool MaiorQue;
	bool MenorQue;
	bool IgualA;
	};

#endif /* NUMEROSFRACIONARIOS_H_ */

#ifndef NUMEROSFRACIONARIOS_H_


//numerosfracionarios.cpp
#include "NumerosFracionarios.h"

NumerosFracionarios::NumerosFracionarios() {
	// TODO Auto-generated constructor stub

}

NumerosFracionarios::~NumerosFracionarios() {
	// TODO Auto-generated destructor stub
}
void NumerosFracionarios::(int numerador=0,int denominador=1): a(numerador),b(denominador){
	 reduz();
}
int NumerosFracionarios::getA()const{
	return a;
}
int NUmerosFracionarios::getB()const{
	return b;
}
void NumerosFracionarios::setAB(int numerador,int denominador){
	a=numerador;
	b=denominador;
	reduz();
}
double NumerosFracionarios::soma(NumerosFracionarios& outro)const{
	 int numerador = a * outro.b + b * outro.a;
	 int denominador = b * outro.b;
	 return NumerosFracionarios(numerador, denominador);
}
double NumerosFracionarios::multiplicacao(const NumerosFracionarios& outro) const {
      int numerador = a * outro.a;
      int denominador = b * outro.b;
      return NumerosFracionarios(numerador, denominador);
}
Double NumerosFracionarios::subtracao(const NumerosFracionarios& outro) const {
        int numerador = a - outro.a;
        int denominador = b - outro.b;
      return NumerosFracionarios(numerador, denominador);
}
double NumerosFracionarios::divisao(const NumerosFracionarios& outro) const {
             int numerador = a * outro.b;
             int denominador = b * outro.a;
             return NumerosFracionarios(numerador, denominador);
}
bool maiorQue(const NumerosFracionarios and outro) const {
        return (a * outro.b) > (b * outro.a);
}
bool menorQue(const NumerosFracionarios and outro) const {
        return (a * outro.b) < (b * outro.a);
}
bool igualA(const NumerosFracionarios and outro) const {
        return (a * outro.b) == (b * outro.a);
}

//testafracionarios.h
#ifndef TESTAFRACIONARIOS_H_
#define TESTAFRACIONARIOS_H_
#include <iostream>
#include "NumerosFracionarios.h"

class TestaFracionarios {
public:
	TestaFracionarios();
	virtual ~TestaFracionarios()
	void menu();
private: 
Fracionarios obj;
};

#endif /* TESTAFRACIONARIOS_H_ */


//testafracionarios.cpp
#include "TestaFracionarios.h"
void TestaFracionario::menu(){
int op;

TestaFracionarios::TestaFracionarios() {
	// TODO Auto-generated constructor stub

}
TestaFracionarios::~TestaFracionarios() {
	// TODO Auto-generated destructor stub
}
void imprimeFracionario(const NumerosFracionarios& fracionario) {
        cout << fracionario.getA() << "/" << fracionario.getB();
    }
 void imprimeDecimal(const NumerosFracionarios& fracionario) {
        double decimal = double(fracionario.getA()) / fracionario.getB();
        cout << decimal;
    }
   double valor;
        do {
            cout << "Escolha uma opção:\n";
            cout << "1. Somar\n";
            cout << "2. Subtrair\n";
            cout << "3. Multiplicar\n";
            cout << "4. Dividir\n";
            cout << "5. Comparar\n";
	    cout << "6. Manipular atributos\n";
	    cout << "7. Encerrar\n"
	    }
cin >> Op;
switch(Op){
case 1:
do{
cout << A soma dos numeros : ";
cin >> valor;
}while(!obj.soma(valor));
case 2: 
	do{
		cout<<"A subtraçao dos numeros:  ";
		cin>>valor;
	}while(obj.subtracao(valor)==false)
case 3: 
         cout << " A multiplicaçao dos numeros: " << obj.multiplicaçao() << endl;
break;
case  4:
	cout << "A divisao dos numeros:  "<< obj.divisao() << endl;
	break;
case  5: 
	cout << " Comparaçao dos numeros: "<< obj.comparaçao() << endl;
	break;
case 6: 
        cout << "Manipular atributos" << obj.setAB() << endl;
break;
case 7:
break;
}
	  
//int man
#include <iostream>
#include "TestaFracionarios.h"
using namespace std;

int main() {
	TestaFracionarios obj;
	obj.menu();
	return 0;
}




