#include <iostream>

using namespace std;

int main() {
   
class QueueVet {
	unsigned int N, Head, tail;
	int *V;
public:
	QueueVet(unsigned int N);
	virtual ~QueueVet();
	bool Push(int T);
	int Front();
	bool Pop();
	bool Empty();
	bool Full();
	void Clear();
};
QueueVet::QueueVet(unsigned int n)
{
    V=new int[n];
    N=n;
    Head=tail=0;
}
QueueVet::~QueueVet()
{
    delete[]V;
}
bool QueueVet::Push(int T)
{
    if(tail+1)%N != Head)
    {
        V[tail]=T;
        tail=(tail+1)%N;
        return true;
    }
    return false;
}
bool QueueVet::Pop()
{
    if(Head==tail){
        return false;
    }
    head=(head+1)%N;
    return true;
}
int QueueVet::Front()
{
    return V[Head];
}
bool QueueVet::Full()
{
    return ((tail+1)%N==Head);
}
bool QueueVet::Empty(){
    return (head==Tail);
}
Void QueueVet::Clear()
{
    Head=Tail=0;
}

#include <iostream>

using namespace std;

 cin>>N;
    QueueVet queue(N);
    
    for(i=1;i<=N;i++)
    {
        if(queue.Push(i))
        {
            cout<<"Pushed: "<<i<<endl;
        }
        else{
            cout<<"Cheio";
        }
    }
    cout<<"Mostrar o 1 da fila:"<<queue.Front<<endl;
    
    if(!queue.Empty)//Nao pode estar vazia
    {
        cout<<"Retirar da fila: "<<queue.Front<<endl;
        queue.Pop();
    }


